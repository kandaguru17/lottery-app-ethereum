{"version":3,"sources":["web3.ts","lottery.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["window","ethereum","enable","web3","Web3","currentProvider","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","intialState","manager","players","balance","value","message","WAIT_MESSAGE","App","useState","state","setstate","useEffect","a","lottery","methods","call","getPlayers","getBalance","options","address","currentPlayer","prevState","getManager","enrollPlayer","e","preventDefault","getAccounts","accounts","enroll","send","from","utils","toWei","console","log","chooseWinner","res","className","length","map","it","fromWei","onSubmit","onChange","persist","target","onInputChange","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3cf049de.chunk.js","sourcesContent":["import Web3 from 'web3';\n\ndeclare global {\n  interface Window {\n    web3: any;\n    ethereum: any;\n  }\n}\nwindow.ethereum.enable();\n\n// injecting the provider in the browser web3 into the Web3(latest) in the project\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;\n","import web3 from './web3';\n\nexport type AbiType = 'function' | 'constructor' | 'event' | 'fallback';\nexport type StateMutabilityType = 'pure' | 'view' | 'nonpayable' | 'payable';\n\nexport interface AbiItem {\n  anonymous?: boolean;\n  constant?: boolean;\n  inputs?: AbiInput[];\n  name?: string;\n  outputs?: AbiOutput[];\n  payable?: boolean;\n  stateMutability?: StateMutabilityType;\n  type: AbiType;\n  gas?: number;\n}\n\nexport interface AbiInput {\n  name: string;\n  type: string;\n  indexed?: boolean;\n  components?: AbiInput[];\n  internalType?: string;\n}\n\nexport interface AbiOutput {\n  name: string;\n  type: string;\n  components?: AbiOutput[];\n  internalType?: string;\n}\n\nconst abi: AbiItem[] = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'manager',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'getPlayers',\n    outputs: [{ name: '', type: 'address[]' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'chooseWinner',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'enroll',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: '', type: 'uint256' }],\n    name: 'players',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n];\n\nconst contractAddress = '0xcd1E7Ff26950867ece1701E0C49d5E26b9539E92';\n\n// creating a local proxy of the contract deployed on rinkeby test network for use within application\nexport default new web3.eth.Contract(abi, contractAddress);\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport lottery from './lottery';\nimport web3 from './web3';\n\nexport interface ILotteryContract {\n  manager: string;\n  players: string[];\n  balance: string;\n  value: string;\n  message: string;\n}\n\nconst intialState: ILotteryContract = {\n  manager: '',\n  players: [],\n  balance: '',\n  value: '',\n  message: '',\n};\n\nconst WAIT_MESSAGE = 'Please wait for transaction to complete...';\nconst SUCCESS_ENROL_MESSAGE = 'You are successfully enrolled';\nconst WINNER_MESSAGE =\n  'winner is Chosen! please check your metamask account to see if your are LUCKY!!';\n\nfunction App() {\n  const [state, setstate] = useState(intialState);\n\n  useEffect(() => {\n    const getManager = async () => {\n      const manager = await lottery.methods.manager().call();\n      const players = await lottery.methods.getPlayers().call();\n      const balance = await web3.eth.getBalance(lottery.options.address);\n      const currentPlayer = players[0];\n      setstate((prevState) => ({\n        ...prevState,\n        manager,\n        players,\n        balance,\n        currentPlayer,\n      }));\n    };\n    getManager();\n  }, [state.message]);\n\n  const renderPlayers = () => {\n    return state.players.map((it) => <li>{it}</li>);\n  };\n\n  const onInputChange = (e: any) => {\n    e.persist();\n    setstate((prevState) => ({\n      ...prevState,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const enrollPlayer = async (e: any) => {\n    e.preventDefault();\n    const accounts = await web3.eth.getAccounts();\n    setstate((prevState) => ({ ...prevState, message: WAIT_MESSAGE }));\n    try {\n      await lottery.methods.enroll().send({\n        from: accounts[0],\n        value: web3.utils.toWei(state.value, 'ether'),\n      });\n      setstate((prevState) => ({\n        ...prevState,\n        message: SUCCESS_ENROL_MESSAGE,\n      }));\n    } catch (err) {\n      setstate((prevState) => ({ ...prevState, message: err.message }));\n      console.log(err);\n    }\n  };\n\n  const chooseWinner = async () => {\n    const accounts = await web3.eth.getAccounts();\n    setstate((prevState) => ({ ...prevState, message: WAIT_MESSAGE }));\n    try {\n      const res = await lottery.methods\n        .chooseWinner()\n        .send({ from: accounts[0] });\n      console.log(res);\n      setstate((prevState) => ({\n        ...prevState,\n        message: WINNER_MESSAGE,\n      }));\n    } catch (err) {\n      setstate((prevState) => ({ ...prevState, message: err.message }));\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <div className='App'>\n        <h1>Lottery Contract</h1>\n        <h3>Contract is managed by : {state.manager} </h3>\n        <h3>Number of players participating : {state.players.length} </h3>\n        <h3>Players in the lottery:</h3>\n        <ul>{renderPlayers()}</ul>\n\n        <h3>Money in the Wallet:</h3>\n        <h2>{web3.utils.fromWei(state.balance, 'ether')} Ether</h2>\n\n        <hr />\n\n        <form onSubmit={enrollPlayer}>\n          <h3>Try your Luck Yo!</h3>\n          <input\n            type='number'\n            name='value'\n            value={state.value}\n            onChange={(e) => onInputChange(e)}\n          />\n          <button type='submit'>Enter</button>\n        </form>\n\n        <hr />\n\n        <>\n          <h3>Pick a random Winner</h3>\n          <button type='button' onClick={chooseWinner}>\n            Choose\n          </button>\n        </>\n\n        <hr />\n\n        <h2>{state.message}</h2>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}